#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v3.0 - Enhanced Module Processor
Processador aprimorado de m√≥dulos com IA
"""

import os
import logging
import asyncio
import json
from typing import Dict, List, Any
from datetime import datetime
from pathlib import Path

# Import do Enhanced AI Manager
from services.enhanced_ai_manager import enhanced_ai_manager

logger = logging.getLogger(__name__)

class EnhancedModuleProcessor:
    """Processador aprimorado de m√≥dulos"""

    def __init__(self):
        """Inicializa o processador"""
        self.ai_manager = enhanced_ai_manager

        # Lista completa dos 16 m√≥dulos
        self.modules_config = {
            'anti_objecao': {
                'title': 'Sistema Anti-Obje√ß√£o',
                'description': 'Sistema completo para antecipar e neutralizar obje√ß√µes',
                'use_active_search': False
            },
            'avatars': {
                'title': 'Avatares do P√∫blico-Alvo',
                'description': 'Personas detalhadas do p√∫blico-alvo',
                'use_active_search': False
            },
            'concorrencia': {
                'title': 'An√°lise Competitiva',
                'description': 'An√°lise completa da concorr√™ncia',
                'use_active_search': True
            },
            'drivers_mentais': {
                'title': 'Drivers Mentais',
                'description': 'Gatilhos psicol√≥gicos e drivers de compra',
                'use_active_search': False
            },
            'funil_vendas': {
                'title': 'Funil de Vendas',
                'description': 'Estrutura completa do funil de vendas',
                'use_active_search': False
            },
            'insights_mercado': {
                'title': 'Insights de Mercado',
                'description': 'Insights profundos sobre o mercado',
                'use_active_search': True
            },
            'palavras_chave': {
                'title': 'Estrat√©gia de Palavras-Chave',
                'description': 'Estrat√©gia completa de SEO e palavras-chave',
                'use_active_search': False
            },
            'plano_acao': {
                'title': 'Plano de A√ß√£o',
                'description': 'Plano de a√ß√£o detalhado e execut√°vel',
                'use_active_search': False
            },
            'posicionamento': {
                'title': 'Estrat√©gia de Posicionamento',
                'description': 'Posicionamento estrat√©gico no mercado',
                'use_active_search': False
            },
            'pre_pitch': {
                'title': 'Estrutura de Pr√©-Pitch',
                'description': 'Estrutura de pr√©-venda e engajamento',
                'use_active_search': False
            },
            'predicoes_futuro': {
                'title': 'Predi√ß√µes de Mercado',
                'description': 'Predi√ß√µes e tend√™ncias futuras',
                'use_active_search': True
            },
            'provas_visuais': {
                'title': 'Sistema de Provas Visuais',
                'description': 'Provas visuais e sociais',
                'use_active_search': False
            },
            'metricas_conversao': {
                'title': 'M√©tricas de Convers√£o',
                'description': 'KPIs e m√©tricas de convers√£o',
                'use_active_search': False
            },
            'estrategia_preco': {
                'title': 'Estrat√©gia de Precifica√ß√£o',
                'description': 'Estrat√©gia de pre√ßos e monetiza√ß√£o',
                'use_active_search': False
            },
            'canais_aquisicao': {
                'title': 'Canais de Aquisi√ß√£o',
                'description': 'Canais de aquisi√ß√£o de clientes',
                'use_active_search': False
            },
            'cronograma_lancamento': {
                'title': 'Cronograma de Lan√ßamento',
                'description': 'Cronograma detalhado de lan√ßamento',
                'use_active_search': False
            }
        }

        logger.info("üöÄ Enhanced Module Processor inicializado")

    async def generate_all_modules(self, session_id: str) -> Dict[str, Any]:
        """Gera todos os 16 m√≥dulos"""
        logger.info(f"üöÄ Iniciando gera√ß√£o de todos os m√≥dulos para sess√£o: {session_id}")

        # Carrega dados base
        base_data = self._load_base_data(session_id)

        results = {
            "session_id": session_id,
            "successful_modules": 0,
            "failed_modules": 0,
            "modules_generated": [],
            "modules_failed": [],
            "total_modules": len(self.modules_config)
        }

        # Cria diret√≥rio de m√≥dulos
        modules_dir = Path(f"analyses_data/{session_id}/modules")
        modules_dir.mkdir(parents=True, exist_ok=True)

        # Gera cada m√≥dulo
        for module_name, config in self.modules_config.items():
            try:
                logger.info(f"üìù Gerando m√≥dulo: {module_name}")

                # Gera conte√∫do do m√≥dulo
                if config.get('use_active_search', False):
                    content = await self.ai_manager.generate_with_active_search(
                        prompt=self._get_module_prompt(module_name, config, base_data),
                        context=base_data.get('context', ''),
                        session_id=session_id
                    )
                else:
                    content = await self.ai_manager.generate_text(
                        prompt=self._get_module_prompt(module_name, config, base_data)
                    )

                # Salva m√≥dulo
                module_path = modules_dir / f"{module_name}.md"
                with open(module_path, 'w', encoding='utf-8') as f:
                    f.write(content)

                results["successful_modules"] += 1
                results["modules_generated"].append(module_name)

                logger.info(f"‚úÖ M√≥dulo {module_name} gerado com sucesso ({len(content)} caracteres)")

            except Exception as e:
                logger.error(f"‚ùå Erro ao gerar m√≥dulo {module_name}: {e}")
                results["failed_modules"] += 1
                results["modules_failed"].append({
                    "module": module_name,
                    "error": str(e)
                })

        # Gera relat√≥rio consolidado
        await self._generate_consolidated_report(session_id, results)

        logger.info(f"‚úÖ Gera√ß√£o conclu√≠da: {results['successful_modules']}/{results['total_modules']} m√≥dulos")

        return results

    def _load_base_data(self, session_id: str) -> Dict[str, Any]:
        """Carrega dados base da sess√£o"""
        try:
            session_dir = Path(f"analyses_data/{session_id}")

            # Carrega s√≠nteses
            synthesis_data = {}
            for synthesis_file in session_dir.glob("sintese_*.json"):
                try:
                    with open(synthesis_file, 'r', encoding='utf-8') as f:
                        synthesis_data[synthesis_file.stem] = json.load(f)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro ao carregar s√≠ntese {synthesis_file}: {e}")

            # Carrega relat√≥rio de coleta
            coleta_content = ""
            coleta_file = session_dir / "relatorio_coleta.md"
            if coleta_file.exists():
                with open(coleta_file, 'r', encoding='utf-8') as f:
                    coleta_content = f.read()

            return {
                "synthesis_data": synthesis_data,
                "coleta_content": coleta_content,
                "context": f"Dados de s√≠ntese: {len(synthesis_data)} arquivos. Relat√≥rio de coleta: {len(coleta_content)} caracteres."
            }

        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar dados base: {e}")
            return {"synthesis_data": {}, "coleta_content": "", "context": ""}

    def _get_module_prompt(self, module_name: str, config: Dict[str, Any], base_data: Dict[str, Any]) -> str:
        """Gera prompt para um m√≥dulo espec√≠fico"""

        base_prompt = f"""# {config['title']}

Voc√™ √© um especialista em {config['description'].lower()}.

## DADOS DISPON√çVEIS:
{base_data.get('context', 'Dados limitados')}

## TAREFA:
Crie um m√≥dulo ultra-detalhado sobre {config['title']} baseado nos dados coletados.

## ESTRUTURA OBRIGAT√ìRIA:
1. **Resumo Executivo**
2. **An√°lise Detalhada**
3. **Estrat√©gias Espec√≠ficas**
4. **Implementa√ß√£o Pr√°tica**
5. **M√©tricas e KPIs**
6. **Cronograma de Execu√ß√£o**

## REQUISITOS:
- M√≠nimo 2000 palavras
- Dados espec√≠ficos do mercado brasileiro
- Estrat√©gias acion√°veis
- M√©tricas mensur√°veis
- Formato markdown profissional

## CONTEXTO DOS DADOS COLETADOS:
{base_data.get('coleta_content', '')[:1000]}...

Gere um conte√∫do extremamente detalhado e pr√°tico.
"""

        return base_prompt

    async def _generate_consolidated_report(self, session_id: str, results: Dict[str, Any]) -> None:
        """Gera relat√≥rio consolidado final"""
        try:
            logger.info("üìã Gerando relat√≥rio consolidado final...")

            # Carrega todos os m√≥dulos gerados
            modules_dir = Path(f"analyses_data/{session_id}/modules")
            consolidated_content = f"""# RELAT√ìRIO FINAL CONSOLIDADO - ARQV30 Enhanced v3.0

**Sess√£o:** {session_id}  
**Data:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}  
**M√≥dulos Gerados:** {results['successful_modules']}/{results['total_modules']}  
**Taxa de Sucesso:** {(results['successful_modules']/results['total_modules']*100):.1f}%

---

## SUM√ÅRIO EXECUTIVO

Este relat√≥rio consolida {results['successful_modules']} m√≥dulos especializados de an√°lise estrat√©gica gerados pelo sistema ARQV30 Enhanced v3.0.

## M√ìDULOS INCLU√çDOS

"""

            # Adiciona cada m√≥dulo gerado
            for module_name in results['modules_generated']:
                module_file = modules_dir / f"{module_name}.md"
                if module_file.exists():
                    with open(module_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                        title = self.modules_config[module_name]['title']
                        consolidated_content += f"\n## {title}\n\n{content}\n\n---\n\n"

            # Adiciona informa√ß√µes de m√≥dulos falhados
            if results['modules_failed']:
                consolidated_content += "\n## M√ìDULOS N√ÉO GERADOS\n\n"
                for failed in results['modules_failed']:
                    consolidated_content += f"- **{failed['module']}**: {failed['error']}\n"

            # Salva relat√≥rio consolidado
            consolidated_path = f"analyses_data/{session_id}/relatorio_final_completo.md"
            with open(consolidated_path, 'w', encoding='utf-8') as f:
                f.write(consolidated_content)

            logger.info(f"‚úÖ Relat√≥rio consolidado salvo em: {consolidated_path}")

        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar relat√≥rio consolidado: {e}")

# Inst√¢ncia global
enhanced_module_processor = EnhancedModuleProcessor()