#!/usr/bin/env python3
import os
import time
import logging
from typing import Dict, Any
from datetime import datetime

# Importa o sistema de IA aprimorado
try:
    from .enhanced_ai_manager import EnhancedAIManager
    HAS_ENHANCED_AI = True
except ImportError:
    HAS_ENHANCED_AI = False

# Fallback para Gemini direto se n√£o tiver o sistema aprimorado
try:
    import google.generativeai as genai
    HAS_GEMINI = True
except ImportError:
    HAS_GEMINI = False

logger = logging.getLogger(__name__)

class GeminiReportGenerator:
    def __init__(self):
        """Inicializa o gerador de relat√≥rios com IA aprimorada"""
        self.ai_manager = None
        
        # Tenta usar o sistema de IA aprimorado primeiro
        if HAS_ENHANCED_AI:
            try:
                self.ai_manager = EnhancedAIManager()
                logger.info("‚úÖ Sistema de IA aprimorado inicializado (Qwen/OpenRouter + Gemini)")
            except Exception as e:
                logger.error(f"‚ùå Erro ao inicializar sistema de IA aprimorado: {e}")
                self.ai_manager = None
        
        # Fallback para Gemini direto
        if not self.ai_manager and HAS_GEMINI:
            try:
                genai.configure(api_key=os.getenv('GEMINI_API_KEY', 'demo-key'))
                self.model = genai.GenerativeModel("gemini-pro")
                logger.info("‚úÖ Gemini direto configurado como fallback")
            except Exception as e:
                logger.error(f"‚ùå Erro ao configurar Gemini: {e}")
                self.model = None
        else:
            self.model = None

    def study_and_generate_report(self, markdown_content: str, study_time_minutes: int = 5) -> str:
        """Simula o 'estudo' da IA sobre o conte√∫do do markdown e gera um relat√≥rio."""
        logger.info(f"üß† Iniciando 'estudo' da IA sobre o conte√∫do do markdown por {study_time_minutes} minutos...")
        
        # Simula o tempo de processamento/estudo
        time.sleep(study_time_minutes * 60) 
        
        logger.info("‚úÖ 'Estudo' da IA conclu√≠do. Gerando relat√≥rio...")
        
        prompt = f"""
        Voc√™ √© um especialista em an√°lise de mercado. Estude o seguinte documento detalhado em Markdown e gere um relat√≥rio robusto e conciso, destacando os principais insights, tend√™ncias e recomenda√ß√µes. Inclua um resumo executivo, an√°lise de mercado (Alibaba), an√°lise de m√≠dias sociais e conclus√µes.

        Documento para estudo:
        {markdown_content}

        Estrutura do relat√≥rio:
        # Relat√≥rio de An√°lise de Mercado
        ## Resumo Executivo
        ## An√°lise Alibaba (Principais Produtos e Fornecedores)
        ## An√°lise de M√≠dias Sociais (Sentimento e Engajamento)
        ## Conclus√µes e Recomenda√ß√µes
        """
        
        try:
            # Usa o sistema de IA aprimorado se dispon√≠vel
            if self.ai_manager:
                # Usa gera√ß√£o com busca ativa para relat√≥rios mais robustos
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    response = loop.run_until_complete(
                        self.ai_manager.generate_with_active_search(
                            prompt=prompt,
                            context=markdown_content[:2000],  # Limita contexto para evitar overflow
                            session_id="report_generation",
                            max_search_iterations=2
                        )
                    )
                    return response
                finally:
                    loop.close()
            
            # Fallback para Gemini direto
            elif self.model:
                response = self.model.generate_content(prompt)
                return response.text
            
            else:
                raise Exception("Nenhum sistema de IA dispon√≠vel")
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar relat√≥rio com IA: {e}")
            return self._generate_fallback_report_from_markdown(markdown_content)

    def _generate_fallback_report_from_markdown(self, markdown_content: str) -> str:
        """Relat√≥rio de fallback simplificado a partir do markdown."""
        return f"""# Relat√≥rio de An√°lise de Mercado (Fallback)
## Resumo Executivo
Este √© um relat√≥rio de fallback gerado em {datetime.now().strftime("%d/%m/%Y %H:%M")}.

Devido a um erro na gera√ß√£o completa, apresentamos um resumo simplificado do conte√∫do estudado.

## Conte√∫do Principal do Documento:

{markdown_content[:1000]}... (conte√∫do truncado para brevidade)

## Conclus√µes
Por favor, revise o log para mais detalhes sobre o erro na gera√ß√£o do relat√≥rio completo.
"""

    def generate_comprehensive_report(self, data: Dict[str, Any]) -> str:
        """M√©todo original, agora adaptado para usar o estudo ou ser um fallback."""
        # Este m√©todo pode ser adaptado para chamar study_and_generate_report
        # ou ser um ponto de entrada para relat√≥rios mais simples sem 'estudo' prolongado.
        # Por simplicidade, vamos us√°-lo como um wrapper para o estudo agora.
        
        # Converte os dados em um formato markdown para o 'estudo'
        temp_markdown_content = f"""
# Dados da An√°lise

## Dados Alibaba
{data.get("alibaba_data", {})}

## Dados Social Media
{data.get("social_data", {})}

## Screenshots Capturados
{data.get("screenshots", [])}
"""
        return self.study_and_generate_report(temp_markdown_content, study_time_minutes=5)

gemini_reports = GeminiReportGenerator()

